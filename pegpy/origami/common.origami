// common origami

#Source          = "${*}" "${NL}"
#Block           = "{${+NL}${*}${-NL}}" "${NL}"
#FuncDecl        = "function ${1}${2} ${@block.ret(-1)}"
#LParams         = "(${*})" ","
#Params          = "(${*})" ","
#Param           = ${1}
#FuncExpr        = "function (${1}): ${-1}"
#Return@0        = return
#Return@1        = return ${1}

#LetDecl@3       = ${type(name)} ${name} = ${expr}
#LetDecl@2       = ${name} = ${expr}
#VarDecl@3       = ${type(name)} ${name} = ${expr}
#VarDecl@2       = ${name} = ${expr}

#Assign          = ${1} = ${2}

#Group           = (${1})
#Infix           = ${@(1)}${2}${@(3)}
#Unary           = ${1}${@(2)}
#ApplyExpr       = "${@(1)}(${2:})" ","
#MethodExpr      = "${@(1)}.${2}(${3:})" ","
#GetExpr         = ${@(1)}.${2}
#IndexExpr       = ${@(1)}[${2}]

#IfExpr : (Bool,a,a) -> a    = ${@(1)} ? ${@(2)} : ${@(3)}

#Tuple       = "(${*})" ","
#List        = "[${*}]" ","

+: (Int,Int) -> Int = ${1}+${2}
*: (Int,Int) -> Int = ${1}*${2}

+                = "(${*})" "+"
+@2              = ${1}+${2}
-@2              = ${1}-${2}
*@2              = ${1}*${2}
/@2              = ${1}/${2}
%@2              = ${1}%${2}
||@2             = ${1}||${2}
&&@2             = ${1}&&${2}
==@2             = ${1}==${2}
!=@2             = ${1}!=${2}
<=@2             = ${1}<=${2}
>=@2             = ${1}>=${2}
<@2              = ${1}<${2}
>@2              = ${1}>${2}
&@2              = ${1}&${2}
|@2              = ${1}|${2}
^@2              = ${1}^${2}
<<@2             = ${1}<<${2}
>>@2             = ${1}>>${2}

-@1              = -${1}
!@1              = !${1}
~@1              = ~${1}
+@1              = ${1}

#TrueExpr        = true
#FalseExpr       = false
#NullExpr        = null

//TODO
#StringExpr      = \"${1}\"
#CharExpr        = '${1}'

Float:Int->Float    = float(${1})

#ParamType@2      = ${1}<${2}>
List@2            = ${2}[]
//#BaseType@Int     = int
Void@1           = ${1}
Any              = "/*FIXME*/"

size:List[a]->Int = ${1}.length
