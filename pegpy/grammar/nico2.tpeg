/**
 * Nico Grammar
 *
 * Authors:
 *   Yosuke Watanabe
 *   Kimio Kuramitsu (https://github.com/kkuramitsu/)
 */

example Source '''
第１条 送金する(send)
    あなたは送金者である

第２条 返金する(send)
    あなたは返金者である
'''

Source = EOL? {
    (FuncDecl EOL)*
    #Source
} EOF

import 'konoha6.tpeg' as konoha

/* Indent-based Code Layout */

EOF          = !.
NL           = '\n' / EOF
S            = [ \t\r　]

_            = ( S / BLOCKCOMMENT / LINECOMMENT )*
__           = ( S / '\n' / BLOCKCOMMENT / LINECOMMENT )*
SPC          = ( S / BLOCKCOMMENT / LINECOMMENT )+

BLOCKCOMMENT = '/*' ( !'*/' . )* '*/'
             / '(*' ( !'*)' . )* '*)'
LINECOMMENT  = '//' ( !NL . )*

EOL          = _ NL (_ NL)*
INDENT       = '\n' S*

/* Character */

C  =
    / HIRA
    / KATA
    / KANJI
    / MARK
    / [ａ-ｚＡ-Ｚ０-９]
    / [a-zA-Z0-9]

HIRA = [ぁ-ん]
KATA = [ァ-ヶ]
KANJI = [㐀-䶵一-龠々〇〻]
MARK = [ー]

W     = [ァ-ヶ㐀-䶵一-龠々〇〻ａ-ｚＡ-Ｚa-zA-Z]
DIGIT = [0-9０-９]

"{" = [{｛] _
"}" = [}｝] _
"[" = [[［【] _
"]" = [\]］】] _
"(" = [(（] _
")" = [)）] _
"=" = [=＝] ![=＝] _
"," = [,、] _
";" = ([;；] _)+
":" = [:：] _

/* Reserved */

RAWREF    = (!'」' C)+
RESERVE   = '「' @defdict(RAWREF) '」'
UNDEFINED = W (W/DIGIT)*

REF       = RESERVE / @dict(RESERVE) / RESERVED / UNDEFINED

RESERVED = 'あなた'

/* FuncDecl */

example FuncDecl '''
第２条 送金する(send)
    xをyとする
    yをzとする
'''

example FuncDecl '''
第２条 送金する(send)
    パラメータ:
        困った送金者の名前（以下、困り者と呼ぶ）
    あなたは困り者である
'''

FuncDecl = {
    ARTICLE name: ArticleFuncName _
    (EOL _ param: ParamDecl)?
    body: Block
    #FuncDecl
}

ARTICLE
    = '第' _ DIGIT+ _ '条' _

RAW       = (!("(" / [ \t]) C)+ _
RawDecl   = { RAW }
NEWSYMBOL = (!'と呼ぶ' C)+

ArticleFuncName
    = RAW "(" Identifier ")" / RawDecl

Identifier
    = { REF #NameExpr } _

Block = {
    @scope(
        @symbol(INDENT) Statement
        (@match(INDENT) Statement)*
    )
    #Block
}

Statement =
    / ParamDecl
    / Assign

ParamDecl = {
    'パラメータ' ":" _
    @symbol(INDENT) Param
    (@match(INDENT) Param )*
}

Param = {
    decl: RawDecl
    "(" '以下' ","
    name: { @defdict(NEWSYMBOL) }
    'と呼ぶ' _ ")"
    #Param
} _

/* Assign */

example Assign, Statement '''
あなたの名前をポチとする
'''

Assign
    = { left: AssignRef 'は' right: Expression ('とする'/'である')? #Assign }
    / { left: AssignRef 'を' right: Expression 'とする' #Assign }

AssignRef
    = Identifier (recv:^ { [の.．] name: Identifier #GetExpr })*

Expression
    = Identifier
    / konoha.Expression

