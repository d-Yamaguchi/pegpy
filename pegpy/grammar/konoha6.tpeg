/**
 * Konoha6 (Chibi Konoha) Grammar
 *
 * Authors:
 *   Kimio Kuramitsu (https://github.com/kkuramitsu/)
 */

/* Starting Point */

File = __  { (Statement __)* #Source } EOF

import 'origami.tpeg' as origami

EOF          = !.
NL           = '\n' / EOF
S            = [ \t\rã€€]

_            = ( S / BLOCKCOMMENT / LINECOMMENT )*
__           = ( S / '\n' / BLOCKCOMMENT / LINECOMMENT )*
SPC          = ( S / BLOCKCOMMENT / LINECOMMENT )+

BLOCKCOMMENT = '/*' ( !'*/' . )* '*/'
             / '(*' ( !'*)' . )* '*)'
LINECOMMENT  = '//' ( !NL . )*

EOL          = _ NL (_ NL)*
INDENT       = '\n' S*

/* Token */

"{" = '{' __
"}" = __ '}' _
"[" = '[' __
"]" = __ ']' _
"(" = '(' __
")" = __ ')' _
"<" = '<' _
">" = '>' _
"=" = '=' !'=' _
"," = ',' __
";" = (';' _)+
":" = ':' __

/* Identifier */

Identifier = { NAME [']* #NameExpr } _
           / '(' { OPNAME #NameExpr } ')' _
NAME       = [a-zA-Z_\x80-\xF7] W*
W          = [a-zA-Z0-9\x80-\xF7]

OPNAME =
	/ '++'  / '+'
	/ '-->' / '->' / '--' / '-'
	/ '**'  / '*'
	/ '^^'  / '^'
	/ '/'
	/ '%'
	/ '&&&' / '&&' / '&'
	/ '|||' / '||' / '|'
	/ '===' / '==>' / '==' / '=>'
	/ '!='  / '!'
	/ '>='  / '>>' / '>'
	/ '<='  / '<<' / '<'
	/ '::'
	/ '~'

example Identifier abc
example Identifier (+)

/* Type */

Type = origami.Type

/* Statement */

Statement =
    / Decorator
	/ LetDecl
	/ AssumeDecl
	/ CodeDecl
	/ FuncDecl
	/ AssignStmt
	/ Expression

/* Decorator */

example Decorator, Statement '''
@contract(MyCoin)
f(x) = x + 1
'''

Decorator = {
    '@' name: Identifier
    ("(" params: Params ")")? __
    body: Statement
    #Decorator
}

/* AssumeDecl */

example AssumeDecl, Statement '''
assume x,y,z : Float
'''

AssumeDecl = {
  'assume' !W _
  names: Names
  ":"
  type: Type
  #AssumeDecl
}

Names = {
  Identifier ("," Identifier)*
}

CodeDecl = {
  'codemap' !W _
  @scope(
    (@symbol(INDENT) origami.Statement)
    (@match(INDENT) origami.Statement)*
  )
  #CodeMapTree
}

example CodeDecl, Statement '''
codemap
    +@2: Int->Int = +${1}
    -@2: Int->Int = -${1}
'''

/* LetDecl */

example LetDecl, Statement '''
let a : List[a] = [1,2,3]
'''

LetDecl = {
	'let' SPC
	name: Identifier
	(":" type: Type)?
	"="
	expr: Expression
	#LetDecl
}

AssignStmt = {
	left: LeftHand
    "="
    right: Expression
	#Assign
}

/* FuncDecl */

example FuncDecl, Statement '''
f(x) = x + 1
'''

example FuncDecl, Statement '''
g(x) = {
    let x = 1
    x + 1
}
'''

example FuncDecl, Statement '''
h(x) =
    let x = 1
    x + 1
'''

FuncDecl = {
	name: Identifier
	"(" params: Params ")"
    (":" type: Type)?
    '=' _
    body: (FuncMatch / IndentBlock / Expression)
	#FuncDecl
}

Params = {
	(Param ( "," Param )* )?
	#Params
}

Param = {
	name: Identifier
    (":" type: Type)?
    #Param
}

example FuncDecl, Statement '''
gcd(x,y) =
    | x                 if y == 0
    | gcd(y, x % y)
'''

FuncMatch = {
    FuncCase   FuncCase+
    #Match
}

example FuncCase '''
  | x                 if y == 0
'''

FuncCase = {
    __ '|' _ expr: Expression ('if' _ case: Expression / 'otherwise' _)?
    #MatchCase
}

IndentBlock = {
    @scope(
        @symbol(INDENT) Statement
        (@match(INDENT) Statement)+
    )
    #Block
}

ReturnStmt = {
	'return' __ expr: Expression
	#Return
}

/* Expression */

example FuncExpr, Expression \x x+1
example FuncExpr, Expression \x \y x+y

example IfExpr, Expression if(a > b) a + b else a - b
example IfExpr, Expression if(a < b) then a * b else a / b
example Expression true && false || !true
example Expression a == (b%2)^(c|1)
example Expression f(1,2)
example Expression d.name
example Expression d.f(1,2)

Expression =
    / BlockExpr
	/ FuncExpr
	/ IfExpr
	/ Operator

/* Expression */

BlockExpr = {
	"{"
	(Statement __)*
	"}"
	#Scope
}

IfExpr = {
    'if' _ cond: Expression
    ('then' __)? then: Expression
    ('else' __ else: Expression)?
	#IfExpr
}

/* FuncExpr */

FuncExpr = {
  '\\'
  params: LParams
  ('->' _)?
  right: Expression
  #FuncExpr
}

LParams = {
  (Param ('\\' Param)* / '()')
}

/* Operator */

Operator =
	AndExpr (left:^ { name: { OR #NameExpr } _ right: AndExpr #Infix })*

OR = '||' !'|'

AndExpr =
	EqExpr (left:^ { name: { AND #NameExpr } _ right: EqExpr #Infix })*

AND = '&&' !'&'

EqExpr =
	SumExpr (left:^ { name: { EQ #NameExpr } _ right: SumExpr #Infix })*

EQ =
	/ '==' !'='
	/ '!=' !'='
	/ '<=' !'='
	/ '>=' !'='
	/ '<'  !'<'
	/ '>'  !'>'

SumExpr =
	ProdExpr (left:^ { name: { SUM #NameExpr } _ right: ProdExpr #Infix })*

SUM =
	/ '++'
	/ '+'
	/ '-' !'>'
	/ '|' !'|'

ProdExpr =
	UnaryExpr (left:^ { name: { PROD #NameExpr } _ right: UnaryExpr #Infix })*

PROD =
	/ '/'
	/ '*'
	/ '%'
	/ '^'
	/ '<<'
	/ '>>'
	/ '&' !'&'

UnaryExpr
	= { name: {PRE #NameExpr} _ expr: UnaryExpr #Unary }
    / SuffixExpr

PRE =
    / '-' !'-'
    / '!'
    / '~'
    / '+'

SuffixExpr =
	Primary (
	    recv:^ { '.' _ name: Identifier "(" params: Expressions ")" #MethodExpr }
	    / recv:^ { '.' _ name: Identifier #GetExpr }
	    / recv:^ { "(" Expression? ( "," Expression )* ")" #ApplyExpr }
	    / recv:^ { "[" params: Expressions "]" #IndexExpr }
	    / recv:^ { "<" type: Type ">" #CastExpr }
	)*

LeftHand =
    Identifier (
	    recv:^ { '.' _ name: Identifier #GetExpr }
    	/ recv:^ { "[" params: Expressions "]" #IndexExpr }
    )*


Expressions = {
	Expression? ( "," Expression )*
}

/* Primary */

example Primary, Expression (1,2) //
example Primary, Expression (1)
example Primary, Expression () //
example Primary, Expression [1,2,3]
example Primary, Expression { name: 'naruto', age: 17 }
example Primary, Expression {"name": 'naruto', "age": '17'}

Primary =
  / Defined
  /	GroupExpr
  / ListExpr
  / DataExpr
  / Constant
  / Identifier

/* Defined */

Defined = {
    'defined' _ "("
    { (![) ] .)+ #Symbol }
    _ ")"
    #Defined
}

GroupExpr = { "(" (Expression ("," Expression)* )?  ")" #TupleExpr }

ListExpr = { "[" (Expression ("," Expression)* )? ","?  "]" #ListExpr }

DataExpr = { "{" (KeyValue ("," KeyValue)*) / (':' _) ","? "}" #DataExpr }

KeyValue = {
	name: (Identifier/StringExpr)
	':' _
	value: Expression
}

/* Literal */

Constant =
    / TripleExpr
	/ StringExpr
	/ CharExpr
	/ FloatExpr
	/ IntExpr
	/ TrueExpr
	/ FalseExpr
	/ NullExpr

example StringExpr, Expression "\n\u1234a\0"
example CharExpr, Expression '\''
example IntExpr, Expression 0177
example IntExpr, Expression 0b1010_1010
example IntExpr, Expression 0xdeadbeaf
example IntExpr, Expression 0L
example FloatExpr, Expression 1.1e-9
example TrueExpr, Expression true

TripleExpr =
	'\'\'\'' { TemplateContent* #TemplateExpr } '\'\'\''

TemplateContent =
	'${' Expression '}'
	/ { (!'\'\'\'' !'${' .)* #StringExpr }

StringExpr = '"' { STRING_CONTENT* #StringExpr } '"' _
CharExpr = '\'' { CHAR_CONTENT* #CharExpr } '\'' _
STRING_CONTENT = ESCAPE / ![\"\n\\] .
CHAR_CONTENT   = ESCAPE / !['\n\\] .
ESCAPE =
	'\\' ['\"\\bfnrt]
	/ '\\' [0-3] [0-7] [0-7]
    / '\\' [0-7] [0-7]
    / '\\' [0-7]
	/ '\\' 'u'+ HEX HEX HEX HEX

IntExpr = {
	(DECIMAL / HEXADECIMAL / BINARY / OCTAL)
	#IntExpr
} _

DECIMAL = '0' ![bBxX0-9_] / [1-9] ( '_'* DIGIT )*
HEXADECIMAL = '0' [xX] HEX ( '_'* HEX )*
BINARY = '0' [bB] [01] ( '_'* [01] )*
OCTAL = '0' ( '_'* [0-7] )*
DIGIT = [0-9]
HEX = [a-fA-F0-9]
LONG_SUFFIX = [lL]

FloatExpr = {
	FLOAT #DoubleExpr
} _

FLOAT =
	FRACTION EXPONENT?
    / DIGIT+ EXPONENT

FRACTION =
	!'_' ( '_'* DIGIT )* '.' DIGIT ( '_'* DIGIT )*
    / DIGIT ( '_'* DIGIT )* '.' !'.'

EXPONENT =
	[eE] [+\-]? DIGIT ( '_'* DIGIT )*

TrueExpr  = { 'true' !W  #TrueExpr } _
FalseExpr = { 'false' !W #FalseExpr } _
NullExpr  = { 'null' !W #NullExpr } _
